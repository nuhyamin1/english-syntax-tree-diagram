from flask import Flask, render_template, request
# Remove NLTK imports if you are fully switching (or keep if needed for other things)
# import nltk
# import json # Not needed if using displaCy's HTML output

import spacy
from spacy import displacy # Import the displaCy visualizer

# Load the spaCy model ONCE when the app starts, not inside the request
# Use the model you downloaded (e.g., "en_core_web_sm")
try:
    nlp = spacy.load("en_core_web_sm")
except OSError:
    print("Downloading 'en_core_web_sm' model...")
    spacy.cli.download("en_core_web_sm")
    nlp = spacy.load("en_core_web_sm")


# --- Remove or comment out the NLTK CFG, parser, and tree conversion function ---
# grammar = nltk.CFG.fromstring(...)
# parser = nltk.ChartParser(grammar)
# def nltk_tree_to_dict(tree): ...


# --- Flask App ---
app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    dependency_html_output = None # HTML generated by displaCy
    error_message = None
    sentence = ""

    if request.method == 'POST':
        sentence = request.form.get('sentence', '').strip()
        if sentence:
            try:
                # Process the sentence with spaCy
                doc = nlp(sentence)

                # Use displaCy to generate HTML for the dependency parse
                # page=False returns the HTML as a string
                # options allow customization
                options = {
                    'compact': True,
                    'bg': '#fafafa',
                    'color': '#333333',
                    'font': 'Arial, sans-serif',
                    'distance': 120 # Adjust spacing if needed
                 }
                dependency_html_output = displacy.render(doc, style="dep", page=False, options=options)

            except Exception as e:
                # Handle potential errors during spaCy processing
                error_message = f"An error occurred during processing: {e}"
                print(f"Error processing sentence '{sentence}': {e}") # Log the error server-side

        elif request.form: # If POST but sentence is empty
             error_message = "Please enter a sentence."
        # No specific error needed for GET request initial load

    return render_template('index.html',
                           # Pass the generated HTML to the template
                           dependency_html_output=dependency_html_output,
                           error=error_message,
                           input_sentence=sentence)

if __name__ == '__main__':
    app.run(debug=True)